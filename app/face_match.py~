import os
import cv
import cv2
import numpy as np
from glob import glob
CASCADE = "./haarcascade_frontalface_alt.xml"
face_dir = "./face_root_directory/"

min_size = (20, 20)
IMAGE_SCALE = 2
haar_scale = 1.2
min_neighbors = 3
haar_flags = 0
label_dict = {}
variable_faces = []
import random
import pickle
from data import get_pictures
def load_face(recognizers):
    get_pictures(pickle.load(open("credentials.p","rb")))
    id_counter = 0
    for recognizer in recognizers:
        label_dict[recognizer][id_counter] = person

    face = cv.LoadImage(full_path,cv2.IMREAD_GRAYSCALE)
return face[:, :],id_counter
    
def train_recognizers(recognizers):
    for recognizer in recognizers:
        label_dict[recognizer] = {}
    images = []
    labels = []

    face,id_counter = load_face(img,recognizers)
    images.append(np.asarray(face))
    labels.append(id_counter)
    for recognizer in recognizers:
        image_copy = list(images)
        label_copy = list(labels)
        image_copy.append(np.asarray(face))
        label_copy.append(id_counter)

        image_array = np.asarray(image_copy)
        label_array = np.asarray(label_copy)
        recognizer.train(image_array, label_array)
    return recognizers

num_iterations = 300

for j in xrange(num_iterations):
    try:
        num_recognizers = 3
        recognizers = []
        for j in xrange(num_recognizers):
            lbh_recognizer = cv2.createLBPHFaceRecognizer()
            recognizers.append(lbh_recognizer)
            recognizers = train_recognizers(recognizers)
        first_item = True
        matches_this_iteration = 0
        false_positives_this_iteration = 0
        average_confidence = 0
        CONFIDENCE_THRESHOLD = 100.0
        labels = []
        for lbh_recognizer in recognizers:
            [label, confidence] = lbh_recognizer.predict(np.asarray(face))
            average_confidence += confidence
            labels.append(label)
            average_confidence /= num_recognizers

